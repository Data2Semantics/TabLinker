def mark(i,j, l, w_sheet, rule='H'):
    hcell = r_sheet.cell(i,j)
    print "'{}' marked as {}.".format(hcell.value, rule)
    l.append((i,j))
    w_sheet.write(i,j,hcell.value+" ("+rule+")")
    return
    
def markLeft(i,j,l,w_sheet, rule='H'):
#    print 'boe', i, j
    for jj in range(0,j) :

        if not isEmpty(i,jj) :
            hcell = r_sheet.cell(i,jj)
            print "'{}' marked as {}.".format(hcell.value, rule)
            l.append((i,jj))
            w_sheet.write(i,jj,hcell.value+" (" +rule + ") ")
    return


def blanksRight(i,j):
    colns = number_of_good_cols(r_sheet)
    onlyblanks = True
    
        
    for c in range(j+1,colns):
        if r_sheet.cell(i,c).ctype == XL_CELL_EMPTY :
            pass
        elif r_sheet.cell(i,c).ctype == XL_CELL_BLANK :
            pass
        else: 
            onlyblanks = False
            break
            
    return onlyblanks


def hasBottomBorder(i,j):
    hcell = r_sheet.cell(i,j)
    
    if rb.xf_list[hcell.xf_index].border.bottom_line_style != 0 :
        return True
    else :
        return False
    
def hasTopBorder(i,j):
    hcell = r_sheet.cell(i,j)
    
    if rb.xf_list[hcell.xf_index].border.top_line_style != 0 :
        return True
    else :
        return False
    
def hasLeftBorder(i,j):
    hcell = r_sheet.cell(i,j)
    
    if rb.xf_list[hcell.xf_index].border.left_line_style != 0 :
        return True
    else :
        return False
    
def hasRightBorder(i,j):
    hcell = r_sheet.cell(i,j)
    
    if rb.xf_list[hcell.xf_index].border.right_line_style != 0 :
        return True
    else :
        return False
    
def hasBoldFont(i,j):
    hcell = r_sheet.cell(i,j)
    if rb.font_list[rb.xf_list[hcell.xf_index].font_index].bold == 1 :
        return True
    else :
        return False

    
def isLeftOfEmpty(i,j):
    return isEmpty(i,j+1)
    
    
def isEmpty(i,j):
    if (r_sheet.cell(i,j).ctype == XL_CELL_EMPTY or r_sheet.cell(i,j).ctype == XL_CELL_BLANK) :
        return True
    else :
        return False

def isNotText(i,j):    
    if r_sheet.cell(i,j).ctype != XL_CELL_TEXT :
        return True
    else :
        return False
    
def isEmptyRow(i,colns):
    for j in range(0,colns) :
        if not isEmpty(i,j):
            return False
        
    return True

def isEmptyColumn(j,rowns):
    for i in range(0,rowns) :
        if not isEmpty(i,j):
            return False
        
    return True
    
    
    
 #BBAAAAA






            if (i,j) in headers :
                print "Already marked as header!"
                break
            
            try:
                # Rules only apply if source_cell type is text. Empty cells are never headers.
                if source_cell.ctype == XL_CELL_TEXT :                    
                    # HEADER RULES
                    # Match if source_cell has bottom AND top border
                    if hasTopBorder(i,j) and hasBottomBorder(i,j) :
                        mark(i, j, headers, w_sheet, 'HBorder1')
                        if (i-1,j) in headers :
                            mark(source_cell, i-1, j, broaders, w_sheet, 'HBorderBroader')
                    
                    # Match if source_cell has top border, and source_cell below is empty.    
                    elif hasTopBorder(i,j) and isEmpty(i+1,j) :
                        mark(i, j, headers, w_sheet, 'HBorder2')
                        if (i-1,j) in headers :
                            mark(i-1, j, broaders, w_sheet, 'HBorderBroader')
                            
                    # Match if source_cell has bottom border, and is on the top row  
                    elif hasBottomBorder(i,j) and i == 0 :
                        mark(i, j, headers, w_sheet, 'HBorder3')
                        
                    
                    # Match if source_cell has bold font
                    # TOO STRONG
#                    elif hasBoldFont(i,j) :
#                        mark(source_cell, i, j, headers, w_sheet, 'HBold')
#                        if (i-1,j) in headers :
#                            mark(source_cell, i-1, j, broaders, w_sheet, 'HBoldBroader')
                        
                    # SUBJECT RULES
                    # Try to find the 'focus', or subject of the data in a particular row (e.g. a municipality)
                    # If left of empty, and border to the right, it's a SUBJECT in the spreadsheet
                    elif isEmpty(i,j+1) and hasRightBorder(i,j) and not(blanksRight(i,j)):
                        mark(i, j, subjects, w_sheet, 'Subject')
                        markLeft(i,j,broaders,w_sheet,'SubjectBroader')
                        
                    # If left of number, and border to the right, it's a SUBJECT in the spreadsheet
                    elif isNotText(i,j+1) and hasRightBorder(i,j) and not(blanksRight(i,j)):
                        mark(i, j, subjects, w_sheet, 'Subject')
                        markLeft(i,j,broaders,w_sheet,'SubjectBroader')
                
                
                    # Things to check regardless of 'headerness'
                    # If text contains 'totaal', it is a (sub) total, and not a subject
                    if re.search('totaal',source_cell.value.lower()) :
                        mark(i, j, totals, w_sheet, 'Total')
                    
                    if source_cell.value == '}' :
                        mark(i, j, subs, w_sheet, 'Sub')
                
                if isEmpty(i,j) :
                    print "Empty", i,j
                    
                    # TITLE RULE
                    # If source_cell to the left is a header, and current source_cell and all cells to the right are empty, the previous source_cell must have been the title
                    # Don't add if we've already found a title
                    if (i,j-1) in headers and blanksRight(i, j) and len(titles) < 1:
                        mark(i, j-1, titles, w_sheet, 'Empty Neighbour')